---
# Preamble

## Author
author:
  name: Ищенко Ирина Олеговна
  orcid: 0009-0002-0659-9651
  email: 1132226529@rudn.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6
## Title
title: "Отчёт по лабораторной работе №1"
subtitle: "Моделирование сетей передачи данных"
## Generic options
lang: ru-RU
number-sections: true
toc: true
toc-title: "Содержание"
toc-depth: 2
## Crossref customization
crossref:
  lof-title: "Список иллюстраций"
  lot-title: "Список таблиц"
  lol-title: "Листинги"
## Bibliography
bibliography:
  - bib/cite.bib
csl: _resources/csl/gost-r-7-0-5-2008-numeric.csl
## Formats
format:
### Pdf output format
  pdf:
    toc: true
    number-sections: true
    colorlinks: false
    toc-depth: 2
    lof: true # List of figures
    lot: true # List of tables
#### Document
    documentclass: scrreprt
    papersize: a4
    fontsize: 12pt
    linestretch: 1.5
#### Language
    babel-lang: russian
    babel-otherlangs: english
#### Biblatex
    cite-method: biblatex
    biblio-style: gost-numeric
    biblatexoptions:
      - backend=biber
      - langhook=extras
      - autolang=other*
#### Misc options
    csquotes: true
    indent: true
    header-includes: |
      \usepackage{indentfirst}
      \usepackage{float}
      \floatplacement{figure}{H}
      \usepackage[math,RM={Scale=0.94},SS={Scale=0.94},SScon={Scale=0.94},TT={Scale=MatchLowercase,FakeStretch=0.9},DefaultFeatures={Ligatures=Common}]{plex-otf}
### Docx output format
  docx:
    toc: true
    number-sections: true
    toc-depth: 2
---
# Цель работы

Основной целью работы является развёртывание в системе виртуализации VirtualBox mininet, знакомство с основными командами для работы с Mininet через командную строку и через графический интерфейс.

# Выполнение лабораторной работы

Перейдем в репозиторий Mininet, скачаем актуальный релиз ovf-образа виртуальной машины. Запустим систему виртуализации и импортируем файл .ovf и укажем параметры импорта ([рис. @fig-001]).

![Создание ВМ](image/1.png){#fig-001 width=70%}

Перейдем в настройки системы виртуализации и уточним параметры настройки виртуальной машины. В частности, для VirtualBox выберем импортированную виртуальную машину и перейдите в меню "Машина -> Настроить".

Перейдем к опции «Система». Если внизу этого окна есть сообщение об обнаружении неправильных настроек, то, следуя рекомендациям, внесем исправления (изменим тип графического контроллера на рекомендуемый).

В настройках сети первый адаптер должен иметь подключение типа NAT, настроено по умолчанию. Для второго адаптера укажем тип подключения host-only network adapter (виртуальный адаптер хоста), который в дальнейшем мы будем использовать для входа в образ виртуальной машины ([рис. @fig-002]).

![Настройка сети](image/2.png){#fig-002 width=70%}

Запустим виртуальную машину с Mininet.
Залогинимся в виртуальную машину:
- login: mininet
- password: mininet

Посмотрим адрес машины с помощью `ifconfig` ([рис. @fig-003]).

![Запуск mininet](image/3.png){#fig-003 width=70%}

Подключимся к виртуальной машине (из терминала хостовой машины) ([рис. @fig-004]).

![Подключение к ВМ с mininet через SSH](image/4.png){#fig-004 width=70%}

После подключения к виртуальной машине mininet посмотрим IP-адреса машины ([рис. @fig-005]). Активен только внутренний адрес машины 192.168.56.102, поэтому активируем второй интерфейс ([рис. @fig-006]). Установим `mc` для удобства работы.

![Просмотр IP-адресов машины](image/5.png){#fig-005 width=70%}

![Активация второго интерфейса](image/6.png){#fig-006 width=70%}

Для удобства дальнейшей работы добавим для mininet указание на использование двух адаптеров при запуске. Для этого требуется перейти в режим суперпользователя и внести изменения в файл /etc/netplan/01-netcfg.yaml виртуальной машины mininet. В результате файл /etc/netplan/01-netcfg.yaml должен иметь следующий вид  ([рис. @fig-007]).

![Файл /etc/netplan/01-netcfg.yaml](image/7.png){#fig-007 width=70%}

В виртуальной машине mininet переименуем предыдущую установку Mininet. Скачаем новую версию Mininet.
Обновим исполняемые файлы. Проверим номер установленной версии mininet ([рис. @fig-008]).

![Обновление Mininet](image/8.png){#fig-008 width=70%}

Настроим параметры XTerm для увеличения размера шрифта и применения векторных шрифтов вместо растровых. Внесем изменения в файл `/etc/X11/app-defaults/XTerm` ([рис. @fig-009]).

![Настройка шрифтов XTerm](image/9.png){#fig-009 width=70%}

Установим putty и VcXsrv Windows X Server. Запустим XLaunch.

Выберем опции:
- Multiple windows;
- Display number: -1;
- Start no client.

При подключении добавим опцию перенаправления X11: – Connection SSH X11 : Enable X11 forwarding ([рис. @fig-010]).

![Опция перенаправления Х11](image/10.png){#fig-010 width=70%}

При попытке запуска приложения из-под суперпользователя возникает ошибка: `X11 connection rejected because of wrong authentication`. Ошибка возникает из-за того, что X-соединение выполняется от имени пользователя mininet, а приложение запускается от имени пользователя root с использованием sudo. Для исправления этой ситуации необходимо заполнить файл полномочий /root/.Xauthority, используя утилиту xauth. Скопируем значение куки (MIT magic cookie)1 пользователя mininet в файл для пользователя root ([рис. @fig-011]).

![Настройка соединения X11 для суперпользователя](image/13.png){#fig-011 width=70%}

Для запуска минимальной топологии введем в командной строке: `sudo mn`.
Эта команда запускает Mininet с минимальной топологией, состоящей из коммутатора, подключённого к двум хостам. Для отображения списка команд интерфейса командной строки Mininet и примеров их использования введем команду в интерфейсе командной строки Mininet: `help`.

Для отображения доступных узлов введем: `nodes` ([рис. @fig-012]). Вывод этой команды показывает, что есть два хоста (хост h1 и хост h2) и коммутатор (s1).

![Работа с Mininet с помощью командной строки](image/11.png){#fig-012 width=70%}

Иногда бывает полезно отобразить связи между устройствами в Mininet, чтобы понять топологию. Введем команду net в интерфейсе командной строки Mininet, чтобы просмотреть доступные линки: `net`.

Вывод этой команды показывает:
- Хост h1 подключён через свой сетевой интерфейс h1-eth0 к коммутатору на интерфейсе s1-eth1.
- Хост h2 подключён через свой сетевой интерфейс h2-eth0 к коммутатору на интерфейсе s1-eth2.
- Коммутатор s1:
  - имеет петлевой интерфейс lo.
  - подключается к h1-eth0 через интерфейс s1-eth1.
  - подключается к h2-eth0 через интерфейс s1-eth2.

Mininet позволяет выполнять команды на конкретном устройстве. Чтобы выполнить команду для определенного узла, необходимо сначала указать устройство, а затем команду, например: `h1 ifconfig`.

Эта запись выполняет команду ifconfig на хосте h1 и показывает интерфейсы хоста h1 — хост h1 имеет интерфейс h1-eth0, настроенный с IP-адресом 10.0.0.1, и другой интерфейс lo, настроенный с IP-адресом 127.0.0.1.

По умолчанию узлам h1 и h2 назначаются IP-адреса 10.0.0.1/8 и 10.0.0.2/8 соответственно. Чтобы проверить связь между ними, используем команду `ping`. Команда `ping` работает, отправляя сообщения эхо-запроса протокола управляющих сообщений Интернета (ICMP) на удалённый компьютер и ожидая ответа. Например, команда `h1 ping 10.0.0.2` проверяет соединение между хостами h1 и h2 ([рис. @fig-013]).

![Проверка связности хостов](image/12.png){#fig-013 width=70%}

В терминале виртуальной машины mininet запустим MiniEdit: `sudo ~/mininet/mininet/examples/miniedit.py`.

Основные кнопки:
- Select: позволяет выбирать/перемещать устройства. Нажатие Del на клавиатуре после выбора устройства удаляет его из топологии.
- Host: позволяет добавить новый хост в топологию. После нажатия этой кнопки щелкните в любом месте пустого холста, чтобы вставить новый хост.
- Switch: позволяет добавить в топологию новый коммутатор. После нажатия этой кнопки щёлкните в любом месте пустого холста, чтобы вставить переключатель.
- Link: соединяет устройства в топологии. После нажатия этой кнопки щелкните устройство и перетащите его на второе устройство, с которым необходимо установить связь.
- Run: запускает эмуляцию. После проектирования и настройки топологии нажмите кнопку запуска.
- Stop: останавливает эмуляцию.

Добавим два хоста и один коммутатор, соединим хосты с коммутатором.

Настроим IP-адреса на хостах h1 и h2. Для этого удерживая правую кнопку мыши на устройстве выберем свойства. Для хоста h1 укажем IP-адрес `10.0.0.1/8`, а для хоста h2 — `10.0.0.2/8`.

Перед проверкой соединения между хостом h1 и хостом h2 необходимо запустить эмуляцию. Для запуска эмуляции нажмем кнопку Run. После начала эмуляции кнопки панели MiniEdit станут серыми, указывая на то, что в настоящее время они отключены.

Откроем терминал на хосте h1, удерживая правую кнопку мыши на хосте h1 и выбрав Terminal. Это действие позволит выполнять команды на хосте h1. Откроем терминал на хосте h2. На терминале хоста h1 введем команду ifconfig, чтобы отобразить назначенные ему IP-адреса. Интерфейс h1-eth0 на хосте h1 настроен с IP-адресом 10.0.0.1 и маской подсети 255.0.0.0. Повторим эти действия на хосте h2. Его интерфейс h2-eth0 настроен с IP-адресом 10.0.0.2 и маской подсети 255.0.0.0. Проверим соединение между хостами, введя в терминале хоста h1 команду `ping 10.0.0.2`. Для остановки теста нажмем `Ctrl + c`. Остановим эмуляцию, нажав кнопку Stop ([рис. @fig-014]).

![Проверка IP-адресов. Пинг](image/14.png){#fig-014 width=70%}

Ранее IP-адреса узлам h1 и h2 были назначены вручную. В качестве альтернативы можно полагаться на Mininet для автоматического назначения IP-адресов.

Удалим назначенный вручную IP-адрес с хостов h1 и h2. В MiniEdit нажмем Edit Preferences . По умолчанию в поле базовые значения IP-адресов (IP Base) установлено 10.0.0.0/8. Изменим это значение на 15.0.0.0/8 ([рис. @fig-015]).

![Смена базового IP-адреса](image/15.png){#fig-015 width=70%}

Запустим эмуляцию, нажав кнопку Run. Откроем терминал на хосте h1, удерживая правую кнопку мыши на хосте
h1 и выбрав Terminal. Чтобы отобразить IP-адреса, назначенные хосту h1, введем команду `ifconfig`. Интерфейс h1-eth0 на узле h1 теперь имеет IP-адрес 15.0.0.1 и маску подсети 255.0.0.0. Проверим IP-адрес, назначенный хосту h2. Соответствующий интерфейс h2-eth0 на хосте h2 имеет IP-адрес 15.0.0.2 и маску подсети 255.0.0.0([рис. @fig-016]).

![Просмотр IP-адреса на h1](image/16.png){#fig-016 width=70%}

Остановим эмуляцию, нажав кнопку Stop.

В домашнем каталоге виртуальной машины mininet создадим каталог для работы с проектами mininet: `mkdir ~/work`. Для сохранения топологии сети в файл нажмем в MiniEdit File Save. Укажем имя для топологии и сохраним на своём компьютере. После сохранения проекта поменяем права доступа к файлам в каталоге проекта: `sudo chown -R mininet:mininet ~/work`. Для загрузки топологии в MiniEdit нажмем File Open ([рис. @fig-017]).

![Сохранение топологии](image/17.png){#fig-017 width=70%}

Завершим соединение с виртуальной машиной mininet и выключим её.

# Выводы

В ходе выполнения лабораторной работы я развёрнула mininet в системе виртуализации VirtualBox и ознакомилась с основными командами для работы с Mininet через командную строку и через графический интерфейс.
